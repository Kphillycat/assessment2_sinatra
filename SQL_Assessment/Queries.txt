- Create a database called wizards. The rest of the assesment all will take place in the wizards db.
 
- Create a table called wizards with the following columns (name, age).
CREATE TABLE wizards(
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
name TEXT,
age INTEGER
)
- Write a statement to count the number of rows in the wizards table. How many wizards are there?
SELECT * FROM wizards;
- Insert a wizard into the database.
INSERT INTO wizards (name, age) VALUES ("Count Chocola",160);
- Write a statement to count the number of rows in the wizards table. How many wizards are there now?
SELECT * FROM wizards;
- Insert another wizard into the database.
INSERT INTO wizards (name, age) VALUES ("Tupac", 59);
- Write a statement to change the second wizards age to 21.
UPDATE wizards SET age = 21 WHERE id = 2
- Write a statement to change all wizards ages to 40.
UPDATE wizards SET age = 40
- Write a statement to delete the last wizard.
DELETE FROM wizards WHERE id = 2
- Write a statement to delete the wizards table.
DELETE * FROM wizards

- Create two data models for wizards. The wizards are going to have a name, an age and two powers each. Let's pretend we're in a world where wizards have many powers, but powers belong to one wizard (two wizards cant have the same power) Each power is going to have a name and a damage amount. Write out the sql to create the two schemas and some sample records. What are the costs/benefits of the two approaches? If you only see one way of doing this that's ok. Please explain any potential problems with your approach. What questions can this schema answer easily? What questions can this schema not answer easily?

ALTER TABLE wizards ADD COLUMN power_one_id INTEGER;
ALTER TABLE wizards ADD COLUMN power_two_id INTEGER;
CREATE TABLE powers(
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
name TEXT,
damage INTEGER, 
wizard_id INTEGER
);

INSERT INTO powers (name, damage, wizard_id) VALUES ("dancing", 100, 1), ("Thunder Thighs", 600, 1)
INSERT INTO wizards (name, age, power_one_id, power_two_id) VALUES ("Batman", 62, 3, 4), ("GlowMan", 32, 5, 6)
INSERT INTO powers (name, damage, wizard_id) VALUES ("tickling", 1400, 3), ("Karoke", 60, 3), ("Flying", 5, 4), ("HopScotch", 70, 4)

Lots of issues with this approach in general. Since I had to manually populate the power_id fields and wizard_id fields there's a chance for issues. For example, if I don't remember what wizard_id value I gave to a particular wizard I could mistakenly place the wrong power_id value in the wizards table. The good thing is that the powers schema can say immediately which wizard it belongs to (since it can only have one) you can also find out how many and what kinds of powers a wizard has.  

- Retrieve all the wizards with powers that have the letter "l" in them.
SELECT * FROM wizards
JOIN powers on powers.wizard_id = wizards.id
WHERE powers.name LIKE '%l%';

- Retrieve all the wizards who have a combined damage of 10 or more.
*MYSQL PRO BROKE. GONNA WING IT!!*

- Retrieve all the wizards sorted by their total damage. Your returned data should look like so.. wizard_name, total_damage.
SELECT wizards.name as wizard_name, sum(power.damage) as total_damage FROM wizards
JOIN powers on powers.wizard_id = wizards.id
ORDER BY powers.total_damage;

- Create a wizard that has no powers.
INSERT INTO wizards (name, age) VALUES ("McFly", 45)

- Retrieve all wizards that have no powers.
SELECT * FROM wizards WHERE power_one_id IS NULL AND power_two_id IS NULL

- Create a data model for wizards for a world where wizards have many powers and multiple wizards can have the same power. Create some sample records.

CREATE TABLE power_wizards(power_id INTEGER, wizard_id INTEGER)
INSERT INTO wizards(power_id, wizard_id) VALUES (1,2), (3,4), (1,5), (2,5), (3,1), (3,5)


- Retrieve the first wizard and any powers he/she has with damage greater than 5.
SELECT FIRST(*) FROM wizards
JOIN power_wizards on power_wizards.wizard_id = wizards.id
JOIN powers on power_wizards.power_id = powers.id
WHERE damage > 5;

- What's the difference between an outer and inner join?
Outer joins returns everything that NOT in common between the two tables. Inner joine returns everything that IS in common between the two tables.

- If I just write JOIN, is that an inner or outer join?
Inner

When would I want to use an outer join?
- To get the delta between two tables.